"""
Autogenerated input type of CreateTask
"""
input CreateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: TaskInput!
}

"""
Autogenerated return type of CreateTask
"""
type CreateTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  task: Task!
}

"""
Autogenerated input type of CreateTeam
"""
input CreateTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of CreateTeam
"""
type CreateTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  team: Team!
}

"""
Autogenerated input type of DeleteTask
"""
input DeleteTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteTask
"""
type DeleteTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of ExportTask
"""
input ExportTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ExportTask
"""
type ExportTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of ImportTask
"""
input ImportTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  file: Upload!
}

"""
Autogenerated return type of ImportTask
"""
type ImportTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
}

"""
Represents untyped JSON
"""
scalar JSON

type Mutation {
  createTask(
    """
    Parameters for CreateTask
    """
    input: CreateTaskInput!
  ): CreateTaskPayload
  createTeam(
    """
    Parameters for CreateTeam
    """
    input: CreateTeamInput!
  ): CreateTeamPayload
  deleteTask(
    """
    Parameters for DeleteTask
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload
  exportTask(
    """
    Parameters for ExportTask
    """
    input: ExportTaskInput!
  ): ExportTaskPayload
  importTask(
    """
    Parameters for ImportTask
    """
    input: ImportTaskInput!
  ): ImportTaskPayload
  updateNotificationFlg(
    """
    Parameters for UpdateNotificationFlg
    """
    input: UpdateNotificationFlgInput!
  ): UpdateNotificationFlgPayload
  updateTask(
    """
    Parameters for UpdateTask
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  statuses: [Status!]!
  task(id: ID!): Task!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    from: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    title: String
    to: String
  ): TaskConnection!
  teams: [Team!]!
  users: [User!]!
}

type Status {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Task {
  createdAt: ISO8601DateTime!
  detail: String
  id: ID!
  limitOn: ISO8601Date!
  status: Status
  statusId: ID
  teamId: ID
  title: String!
  updatedAt: ISO8601DateTime!
  userId: ID
}

"""
The connection type for Task.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]

  """
  A list of nodes.
  """
  nodes: [Task]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Task
}

input TaskInput {
  detail: String
  limitOn: String!
  statusId: ID!
  teamId: ID
  title: String!
  userId: ID!
}

type Team {
  id: ID!
  name: String!
  ownerId: ID!
}

"""
Autogenerated input type of UpdateNotificationFlg
"""
input UpdateNotificationFlgInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notificationFlg: String!
}

"""
Autogenerated return type of UpdateNotificationFlg
"""
type UpdateNotificationFlgPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  result: String
}

"""
Autogenerated input type of UpdateTask
"""
input UpdateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  params: TaskInput!
}

"""
Autogenerated return type of UpdateTask
"""
type UpdateTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  task: Task!
}

scalar Upload

type User {
  allowPasswordChange: Boolean
  confirmationSentAt: ISO8601DateTime
  confirmationToken: String
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String
  encryptedPassword: String!
  id: ID!
  image: String
  name: String
  nickname: String
  notificationFlg: Int!
  provider: String!
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  role: Int!
  tokens: JSON
  uid: String!
  unconfirmedEmail: String
  updatedAt: ISO8601DateTime!
}
